package nutcore

import chisel3._
import chisel3.util._

object RVPInstr extends HasInstrType {
  def ADD16   = BitPat("b0100000_?????_?????_000_?????_1110111")
  def RADD16  = BitPat("b0000000_?????_?????_000_?????_1110111")
  def KADD16  = BitPat("b0001000_?????_?????_000_?????_1110111")
  def URADD16 = BitPat("b0010000_?????_?????_000_?????_1110111")
  def UKADD16 = BitPat("b0011000_?????_?????_000_?????_1110111")
  def SUB16   = BitPat("b0100001_?????_?????_000_?????_1110111")
  def RSUB16  = BitPat("b0000001_?????_?????_000_?????_1110111")
  def KSUB16  = BitPat("b0001001_?????_?????_000_?????_1110111")
  def URSUB16 = BitPat("b0010001_?????_?????_000_?????_1110111")
  def UKSUB16 = BitPat("b0011001_?????_?????_000_?????_1110111")
  def ADD8    = BitPat("b0100100_?????_?????_000_?????_1110111")
  def RADD8   = BitPat("b0000100_?????_?????_000_?????_1110111")
  def KADD8   = BitPat("b0001100_?????_?????_000_?????_1110111")
  def URADD8  = BitPat("b0010100_?????_?????_000_?????_1110111")
  def UKADD8  = BitPat("b0011100_?????_?????_000_?????_1110111")
  def SUB8    = BitPat("b0100101_?????_?????_000_?????_1110111")
  def RSUB8   = BitPat("b0000101_?????_?????_000_?????_1110111")
  def KSUB8   = BitPat("b0001101_?????_?????_000_?????_1110111")
  def URSUB8  = BitPat("b0010101_?????_?????_000_?????_1110111")
  def UKSUB8  = BitPat("b0011101_?????_?????_000_?????_1110111")
  def CRAS16  = BitPat("b0100010_?????_?????_000_?????_1110111")
  def RCRAS16 = BitPat("b0000010_?????_?????_000_?????_1110111")
  def KCRAS16 = BitPat("b0001010_?????_?????_000_?????_1110111")
  def URCRAS16= BitPat("b0010010_?????_?????_000_?????_1110111")
  def UKCRAS16= BitPat("b0011010_?????_?????_000_?????_1110111")
  def CRSA16  = BitPat("b0100011_?????_?????_000_?????_1110111")
  def RCRSA16 = BitPat("b0000011_?????_?????_000_?????_1110111")
  def KCRSA16 = BitPat("b0001011_?????_?????_000_?????_1110111")
  def URCRSA16= BitPat("b0010011_?????_?????_000_?????_1110111")
  def UKCRSA16= BitPat("b0011011_?????_?????_000_?????_1110111")
  def ADD32   = BitPat("b0100000_?????_?????_010_?????_1110111")
  def RADD32  = BitPat("b0000000_?????_?????_010_?????_1110111")
  def KADD32  = BitPat("b0001000_?????_?????_010_?????_1110111")
  def URADD32 = BitPat("b0010000_?????_?????_010_?????_1110111")
  def UKADD32 = BitPat("b0011000_?????_?????_010_?????_1110111")
  def SUB32   = BitPat("b0100001_?????_?????_010_?????_1110111")
  def RSUB32  = BitPat("b0000001_?????_?????_010_?????_1110111")
  def KSUB32  = BitPat("b0001001_?????_?????_010_?????_1110111")
  def URSUB32 = BitPat("b0010001_?????_?????_010_?????_1110111")
  def UKSUB32 = BitPat("b0011001_?????_?????_010_?????_1110111")
  def CRAS32  = BitPat("b0100010_?????_?????_010_?????_1110111")
  def RCRAS32 = BitPat("b0000010_?????_?????_010_?????_1110111")
  def KCRAS32 = BitPat("b0001010_?????_?????_010_?????_1110111")
  def URCRAS32= BitPat("b0010010_?????_?????_010_?????_1110111")
  def UKCRAS32= BitPat("b0011010_?????_?????_010_?????_1110111")
  def CRSA32  = BitPat("b0100011_?????_?????_010_?????_1110111")
  def RCRSA32 = BitPat("b0000011_?????_?????_010_?????_1110111")
  def KCRSA32 = BitPat("b0001011_?????_?????_010_?????_1110111")
  def URCRSA32= BitPat("b0010011_?????_?????_010_?????_1110111")
  def UKCRSA32= BitPat("b0011011_?????_?????_010_?????_1110111")
  def SRA16   = BitPat("b0101000_?????_?????_000_?????_1110111")
  def SRA16U  = BitPat("b0110000_?????_?????_000_?????_1110111")
  def SRL16   = BitPat("b0101001_?????_?????_000_?????_1110111")
  def SRL16U  = BitPat("b0110001_?????_?????_000_?????_1110111")
  def SLL16   = BitPat("b0101010_?????_?????_000_?????_1110111")
  def KSLL16  = BitPat("b0110010_?????_?????_000_?????_1110111")
  
  val table = Array(
    ADD16       -> List(InstrP, FuType.simdu, SIMDUOpType.add16),
    RADD16      -> List(InstrP, FuType.simdu, SIMDUOpType.radd16),
    KADD16      -> List(InstrP, FuType.simdu, SIMDUOpType.kadd16),
    URADD16     -> List(InstrP, FuType.simdu, SIMDUOpType.uradd16),
    UKADD16     -> List(InstrP, FuType.simdu, SIMDUOpType.ukadd16),
    SUB16       -> List(InstrP, FuType.simdu, SIMDUOpType.sub16),
    RSUB16      -> List(InstrP, FuType.simdu, SIMDUOpType.rsub16),
    KSUB16      -> List(InstrP, FuType.simdu, SIMDUOpType.ksub16),
    URSUB16     -> List(InstrP, FuType.simdu, SIMDUOpType.ursub16),
    UKSUB16     -> List(InstrP, FuType.simdu, SIMDUOpType.uksub16),
    ADD8        -> List(InstrP, FuType.simdu, SIMDUOpType.add8 ),
    RADD8       -> List(InstrP, FuType.simdu, SIMDUOpType.radd8 ),
    KADD8       -> List(InstrP, FuType.simdu, SIMDUOpType.kadd8 ),
    URADD8      -> List(InstrP, FuType.simdu, SIMDUOpType.uradd8 ),
    UKADD8      -> List(InstrP, FuType.simdu, SIMDUOpType.ukadd8 ),
    SUB8        -> List(InstrP, FuType.simdu, SIMDUOpType.sub8 ),
    RSUB8       -> List(InstrP, FuType.simdu, SIMDUOpType.rsub8 ),
    KSUB8       -> List(InstrP, FuType.simdu, SIMDUOpType.ksub8 ),
    URSUB8      -> List(InstrP, FuType.simdu, SIMDUOpType.ursub8 ),
    UKSUB8      -> List(InstrP, FuType.simdu, SIMDUOpType.uksub8 ),
    CRAS16      -> List(InstrP, FuType.simdu, SIMDUOpType.cras16),
    RCRAS16     -> List(InstrP, FuType.simdu, SIMDUOpType.rcras16),
    KCRAS16     -> List(InstrP, FuType.simdu, SIMDUOpType.kcras16),
    URCRAS16    -> List(InstrP, FuType.simdu, SIMDUOpType.urcras16),
    UKCRAS16    -> List(InstrP, FuType.simdu, SIMDUOpType.ukcras16),
    CRSA16      -> List(InstrP, FuType.simdu, SIMDUOpType.crsa16),
    RCRSA16     -> List(InstrP, FuType.simdu, SIMDUOpType.rcrsa16),
    KCRSA16     -> List(InstrP, FuType.simdu, SIMDUOpType.kcrsa16),
    URCRSA16    -> List(InstrP, FuType.simdu, SIMDUOpType.urcrsa16),
    UKCRSA16    -> List(InstrP, FuType.simdu, SIMDUOpType.ukcrsa16),
    ADD32       -> List(InstrP, FuType.simdu, SIMDUOpType.add32),
    RADD32      -> List(InstrP, FuType.simdu, SIMDUOpType.radd32),
    KADD32      -> List(InstrP, FuType.simdu, SIMDUOpType.kadd32),
    URADD32     -> List(InstrP, FuType.simdu, SIMDUOpType.uradd32),
    UKADD32     -> List(InstrP, FuType.simdu, SIMDUOpType.ukadd32),
    SUB32       -> List(InstrP, FuType.simdu, SIMDUOpType.sub32),
    RSUB32      -> List(InstrP, FuType.simdu, SIMDUOpType.rsub32),
    KSUB32      -> List(InstrP, FuType.simdu, SIMDUOpType.ksub32),
    URSUB32     -> List(InstrP, FuType.simdu, SIMDUOpType.ursub32),
    UKSUB32     -> List(InstrP, FuType.simdu, SIMDUOpType.uksub32),
    CRAS32      -> List(InstrP, FuType.simdu, SIMDUOpType.cras32),
    RCRAS32     -> List(InstrP, FuType.simdu, SIMDUOpType.rcras32),
    KCRAS32     -> List(InstrP, FuType.simdu, SIMDUOpType.kcras32),
    URCRAS32    -> List(InstrP, FuType.simdu, SIMDUOpType.urcras32),
    UKCRAS32    -> List(InstrP, FuType.simdu, SIMDUOpType.ukcras32),
    CRSA32      -> List(InstrP, FuType.simdu, SIMDUOpType.crsa32),
    RCRSA32     -> List(InstrP, FuType.simdu, SIMDUOpType.rcrsa32),
    KCRSA32     -> List(InstrP, FuType.simdu, SIMDUOpType.kcrsa32),
    URCRSA32    -> List(InstrP, FuType.simdu, SIMDUOpType.urcrsa32),
    UKCRSA32    -> List(InstrP, FuType.simdu, SIMDUOpType.ukcrsa32),
    SRA16       -> List(InstrP, FuType.simdu, SIMDUOpType.sra16   ),
    SRA16U      -> List(InstrP, FuType.simdu, SIMDUOpType.sra16u  ),
    SRL16       -> List(InstrP, FuType.simdu, SIMDUOpType.srl16   ),
    SRL16U      -> List(InstrP, FuType.simdu, SIMDUOpType.srl16u  ),
    SLL16       -> List(InstrP, FuType.simdu, SIMDUOpType.sll16   ),
    KSLL16      -> List(InstrP, FuType.simdu, SIMDUOpType.ksll16  )
  )
}

object RVPIInstr extends HasInstrType {
  def SRAI16  = BitPat("b0111000_0_????_?????_000_?????_1110111")
  def SRAI16U = BitPat("b0111000_1_????_?????_000_?????_1110111")
  def SRLI16  = BitPat("b0111001_0_????_?????_000_?????_1110111")
  def SRLI16U = BitPat("b0111001_1_????_?????_000_?????_1110111")
  val table = Array(
    SRAI16      -> List(InstrPI, FuType.simdu, SIMDUOpType.srai16),
    SRAI16U     -> List(InstrPI, FuType.simdu, SIMDUOpType.srai16u),
    SRLI16      -> List(InstrPI, FuType.simdu, SIMDUOpType.srli16),
    SRLI16U     -> List(InstrPI, FuType.simdu, SIMDUOpType.srli16u)
  )
}