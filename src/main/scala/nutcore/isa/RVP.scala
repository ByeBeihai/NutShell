package nutcore

import chisel3._
import chisel3.util._

object RVPInstr extends HasInstrType {
  def ADD16   = BitPat("b0100000_?????_?????_000_?????_1110111")
  def RADD16  = BitPat("b0000000_?????_?????_000_?????_1110111")
  def KADD16  = BitPat("b0001000_?????_?????_000_?????_1110111")
  def URADD16 = BitPat("b0010000_?????_?????_000_?????_1110111")
  def UKADD16 = BitPat("b0011000_?????_?????_000_?????_1110111")
  def SUB16   = BitPat("b0100001_?????_?????_000_?????_1110111")
  def RSUB16  = BitPat("b0000001_?????_?????_000_?????_1110111")
  def KSUB16  = BitPat("b0001001_?????_?????_000_?????_1110111")
  def URSUB16 = BitPat("b0010001_?????_?????_000_?????_1110111")
  def UKSUB16 = BitPat("b0011001_?????_?????_000_?????_1110111")
  def ADD8    = BitPat("b0100100_?????_?????_000_?????_1110111")
  def RADD8   = BitPat("b0000100_?????_?????_000_?????_1110111")
  def KADD8   = BitPat("b0001100_?????_?????_000_?????_1110111")
  def URADD8  = BitPat("b0010100_?????_?????_000_?????_1110111")
  def UKADD8  = BitPat("b0011100_?????_?????_000_?????_1110111")
  def SUB8    = BitPat("b0100101_?????_?????_000_?????_1110111")
  def RSUB8   = BitPat("b0000101_?????_?????_000_?????_1110111")
  def KSUB8   = BitPat("b0001101_?????_?????_000_?????_1110111")
  def URSUB8  = BitPat("b0010101_?????_?????_000_?????_1110111")
  def UKSUB8  = BitPat("b0011101_?????_?????_000_?????_1110111")
  def CRAS16  = BitPat("b0100010_?????_?????_000_?????_1110111")
  def RCRAS16 = BitPat("b0000010_?????_?????_000_?????_1110111")
  def KCRAS16 = BitPat("b0001010_?????_?????_000_?????_1110111")
  def URCRAS16= BitPat("b0010010_?????_?????_000_?????_1110111")
  def UKCRAS16= BitPat("b0011010_?????_?????_000_?????_1110111")
  def CRSA16  = BitPat("b0100011_?????_?????_000_?????_1110111")
  def RCRSA16 = BitPat("b0000011_?????_?????_000_?????_1110111")
  def KCRSA16 = BitPat("b0001011_?????_?????_000_?????_1110111")
  def URCRSA16= BitPat("b0010011_?????_?????_000_?????_1110111")
  def UKCRSA16= BitPat("b0011011_?????_?????_000_?????_1110111")
  
  val table = Array(
    ADD16       -> List(InstrP, FuType.simdu, SIMDUOpType.add16),
    RADD16      -> List(InstrP, FuType.simdu, SIMDUOpType.radd16),
    KADD16      -> List(InstrP, FuType.simdu, SIMDUOpType.kadd16),
    URADD16     -> List(InstrP, FuType.simdu, SIMDUOpType.uradd16),
    UKADD16     -> List(InstrP, FuType.simdu, SIMDUOpType.ukadd16),
    SUB16       -> List(InstrP, FuType.simdu, SIMDUOpType.sub16),
    RSUB16      -> List(InstrP, FuType.simdu, SIMDUOpType.rsub16),
    KSUB16      -> List(InstrP, FuType.simdu, SIMDUOpType.ksub16),
    URSUB16     -> List(InstrP, FuType.simdu, SIMDUOpType.ursub16),
    UKSUB16     -> List(InstrP, FuType.simdu, SIMDUOpType.uksub16),
    ADD8        -> List(InstrP, FuType.simdu, SIMDUOpType.add8 ),
    RADD8       -> List(InstrP, FuType.simdu, SIMDUOpType.radd8 ),
    KADD8       -> List(InstrP, FuType.simdu, SIMDUOpType.kadd8 ),
    URADD8      -> List(InstrP, FuType.simdu, SIMDUOpType.uradd8 ),
    UKADD8      -> List(InstrP, FuType.simdu, SIMDUOpType.ukadd8 ),
    SUB8        -> List(InstrP, FuType.simdu, SIMDUOpType.sub8 ),
    RSUB8       -> List(InstrP, FuType.simdu, SIMDUOpType.rsub8 ),
    KSUB8       -> List(InstrP, FuType.simdu, SIMDUOpType.ksub8 ),
    URSUB8      -> List(InstrP, FuType.simdu, SIMDUOpType.ursub8 ),
    UKSUB8      -> List(InstrP, FuType.simdu, SIMDUOpType.uksub8 ),
    CRAS16      -> List(InstrP, FuType.simdu, SIMDUOpType.cras16),
    RCRAS16     -> List(InstrP, FuType.simdu, SIMDUOpType.rcras16),
    KCRAS16     -> List(InstrP, FuType.simdu, SIMDUOpType.kcras16),
    URCRAS16    -> List(InstrP, FuType.simdu, SIMDUOpType.urcras16),
    UKCRAS16    -> List(InstrP, FuType.simdu, SIMDUOpType.ukcras16),
    CRSA16      -> List(InstrP, FuType.simdu, SIMDUOpType.crsa16),
    RCRSA16     -> List(InstrP, FuType.simdu, SIMDUOpType.rcrsa16),
    KCRSA16     -> List(InstrP, FuType.simdu, SIMDUOpType.kcrsa16),
    URCRSA16    -> List(InstrP, FuType.simdu, SIMDUOpType.urcrsa16),
    UKCRSA16    -> List(InstrP, FuType.simdu, SIMDUOpType.ukcrsa16)
  )
}